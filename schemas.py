from pydantic import BaseModel, Field


class AuthDetails(BaseModel):
    username: str
    password: str


# Define a request model
# This model is used to validate the incoming request data
class RequestModel(BaseModel):
    data_path: str = Field(
        ...,
        description="The path to the directory containing the ECG file.",
        min_length=1,
        json_schema_extra={
            "example": "./data/",
        },
    )
    """
    data_path: This attribute represents the file system path to the directory where the ECG (.mat) file is located.
    It must be a non-empty string. The ellipsis (...) is used to indicate that this field is required.
    
    - `min_length=1` ensures that the provided path is not an empty string.
    - `json_schema_extra={"example": "./data/"}` provides an example of a typical value for this field in the JSON schema 
        generated by Pydantic
    """

    ecg_file: str = Field(
        ...,
        description="The name of the ECG file to be processed.",
        pattern=r"^[\w,\s-]+\.mat$",
        json_schema_extra={
            "example": "data_00001.mat",
        },
    )
    """
    ecg_file: This attribute specifies the filename of the ECG file to be processed, which should end with the .mat extension, 
    indicating that it is a MATLAB file.
    
    - The `pattern` argument enforces a regular expression to validate the file name, ensuring it consists only of word characters 
        (letters, digits, and underscores), commas, spaces, and hyphens, and must end with '.mat'. This is useful to ensure the file 
        name adheres to a specific naming convention and is of the expected file type.
    - `json_schema_extra={"example": "data_00001.mat"}` provides a concrete example of a file name that complies with the 
        specified pattern, which can be particularly helpful for users or developers unfamiliar with the expected file naming format.
    """
